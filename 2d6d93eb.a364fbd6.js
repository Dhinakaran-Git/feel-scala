(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{254:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),c=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},b=function(e){var t=c(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),b=c(n),d=a,O=b["".concat(l,".").concat(d)]||b[d]||p[d]||i;return n?r.a.createElement(O,u(u({ref:t},s),{},{components:n})):r.a.createElement(O,u({ref:t},s))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var s=2;s<i;s++)l[s]=n[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return u})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return c}));var a=n(3),r=n(7),i=(n(0),n(254)),l={id:"feel-unary-tests",title:"Unary-tests",description:"This document outlines unary-tests and examples."},u={unversionedId:"reference/language-guide/feel-unary-tests",id:"reference/language-guide/feel-unary-tests",isDocsHomePage:!1,title:"Unary-tests",description:"This document outlines unary-tests and examples.",source:"@site/docs/reference/language-guide/feel-unary-tests.md",slug:"/reference/language-guide/feel-unary-tests",permalink:"/feel-scala/docs/reference/language-guide/feel-unary-tests",editUrl:"https://github.com/camunda/feel-scala/edit/master/docs/docs/reference/language-guide/feel-unary-tests.md",version:"current",sidebar:"Reference",previous:{title:"Data types",permalink:"/feel-scala/docs/reference/language-guide/feel-data-types"},next:{title:"Introduction",permalink:"/feel-scala/docs/reference/language-guide/feel-expressions-introduction"}},o=[{value:"Comparison",id:"comparison",children:[]},{value:"Interval",id:"interval",children:[]},{value:"Disjunction/or",id:"disjunctionor",children:[]},{value:"Negation/not",id:"negationnot",children:[]},{value:"Expressions",id:"expressions",children:[]}],s={toc:o};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A unary-tests expression is a special kind of boolean expression. Unary-tests expressions should be used for the input\nentries of a decision table (i.e. the conditions of a rule)."),Object(i.b)("p",null,"A unary-tests expression returns ",Object(i.b)("inlineCode",{parentName:"p"},"true")," if one of the following conditions is fulfilled:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The expression evaluates to ",Object(i.b)("inlineCode",{parentName:"li"},"true")," when the input value is applied to it."),Object(i.b)("li",{parentName:"ul"},"The expression evaluates to a list, and the input value is equal to at least one of the values in\nthat list."),Object(i.b)("li",{parentName:"ul"},"The expression evaluates to a value, and the input value is equal to that value."),Object(i.b)("li",{parentName:"ul"},"The expression is equal to ",Object(i.b)("inlineCode",{parentName:"li"},"-")," (a dash).")),Object(i.b)("h3",{id:"comparison"},"Comparison"),Object(i.b)("p",null,"Compares the input value with a given value. Both values must be of the same type."),Object(i.b)("p",null,"The input value is passed implicitly as the first argument of the operator."),Object(i.b)("table",null,Object(i.b)("tr",null,Object(i.b)("th",null,"Operator"),Object(i.b)("th",null,"Description"),Object(i.b)("th",null,"Supported types")),Object(i.b)("tr",null,Object(i.b)("td",null,"(none)"),Object(i.b)("td",null,"equal to"),Object(i.b)("td",null,"any")),Object(i.b)("tr",null,Object(i.b)("td",null,"<"),Object(i.b)("td",null,"less than"),Object(i.b)("td",null,"number, date, time, date-time, duration")),Object(i.b)("tr",null,Object(i.b)("td",null,"<="),Object(i.b)("td",null,"less than or equal to"),Object(i.b)("td",null,"number, date, time, date-time, duration")),Object(i.b)("tr",null,Object(i.b)("td",null,">"),Object(i.b)("td",null,"greater than"),Object(i.b)("td",null,"number, date, time, date-time, duration")),Object(i.b)("tr",null,Object(i.b)("td",null,">="),Object(i.b)("td",null,"greater than or equal"),Object(i.b)("td",null,"number, date, time, date-time, duration"))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'"valid"\n\n< 10\n\n<= date("2020-04-06")\n\n> time("08:00:00")\n\n>= duration("P5D")\n')),Object(i.b)("h3",{id:"interval"},"Interval"),Object(i.b)("p",null,"Checks if the input value is within a given interval between ",Object(i.b)("inlineCode",{parentName:"p"},"x")," and ",Object(i.b)("inlineCode",{parentName:"p"},"y"),"."),Object(i.b)("p",null,"An interval has two boundaries that can be open ",Object(i.b)("inlineCode",{parentName:"p"},"(x..y)")," / ",Object(i.b)("inlineCode",{parentName:"p"},"]x..y[")," or closed ",Object(i.b)("inlineCode",{parentName:"p"},"[x..y]"),". If a\nboundary is closed, it includes the given value (i.e. less/greater than or equal). Otherwise, it\nexcludes the value (i.e. less/greater than)."),Object(i.b)("p",null,"The input value is passed implicitly to the operator."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"(2..5)\n// input > 2 and input < 5\n\n]2..5[\n// input > 2 and input < 5\n\n[2..5]\n// input >= 2 and input <= 5\n\n(2..5]\n// input > 2 and input <= 5\n")),Object(i.b)("h3",{id:"disjunctionor"},"Disjunction/or"),Object(i.b)("p",null,"Combines multiple unary-test expressions following the ternary logic."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Returns ",Object(i.b)("inlineCode",{parentName:"li"},"true")," if at least one unary-test evaluates to ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},"Otherwise, it returns ",Object(i.b)("inlineCode",{parentName:"li"},"false"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"2, 3, 4\n// input = 2 or input = 3 or input = 4\n\n< 10, > 50\n// input < 10 or input > 50\n")),Object(i.b)("h3",{id:"negationnot"},"Negation/not"),Object(i.b)("p",null,"Negates a given unary-test expression. The expression can be a comparison, an interval, or a\ndisjunction."),Object(i.b)("p",null,"It returns ",Object(i.b)("inlineCode",{parentName:"p"},"true")," if the given unary-test evaluates to ",Object(i.b)("inlineCode",{parentName:"p"},"false"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'not("valid")\n// input != "valid"\n\nnot(2, 3)             \n// input != 2 and input != 3 \n')),Object(i.b)("h3",{id:"expressions"},"Expressions"),Object(i.b)("p",null,"Evaluates an expression that returns a boolean value. For example, ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"feel-functions#invocation"}),"invoking a function"),"."),Object(i.b)("p",null,"The input value can be accessed in the expression by using the symbol ",Object(i.b)("inlineCode",{parentName:"p"},"?")," (a question mark)."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'contains(?, "good")\n// check if the input value (string) contains "good"\n\nends with(?, "@camunda.com")\n// checks if the input value (string) ends with "@camunda.com"\n')))}c.isMDXComponent=!0}}]);