"use strict";(self.webpackChunkfeel_scala=self.webpackChunkfeel_scala||[]).push([[2779],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8088:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={id:"feel-unary-tests",title:"Unary-Tests"},i=void 0,o={unversionedId:"reference/language-guide/feel-unary-tests",id:"version-1.12/reference/language-guide/feel-unary-tests",title:"Unary-Tests",description:"Unary-Tests can be used only for input entries of a decision table. They are a special kind of expression with additional operators. The operators get the value of the input expression implicitly as the first argument.",source:"@site/versioned_docs/version-1.12/reference/language-guide/feel-unary-tests.md",sourceDirName:"reference/language-guide",slug:"/reference/language-guide/feel-unary-tests",permalink:"/feel-scala/docs/1.12/reference/language-guide/feel-unary-tests",draft:!1,editUrl:"https://github.com/camunda/feel-scala/edit/master/docs/versioned_docs/version-1.12/reference/language-guide/feel-unary-tests.md",tags:[],version:"1.12",frontMatter:{id:"feel-unary-tests",title:"Unary-Tests"},sidebar:"version-1.12/Reference",previous:{title:"Data Types",permalink:"/feel-scala/docs/1.12/reference/language-guide/feel-data-types"},next:{title:"Expressions",permalink:"/feel-scala/docs/1.12/reference/language-guide/feel-expression"}},p={},s=[{value:"Comparison",id:"comparison",level:3},{value:"Interval",id:"interval",level:3},{value:"Disjunction",id:"disjunction",level:3},{value:"Negation",id:"negation",level:3},{value:"Expression",id:"expression",level:3}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Unary-Tests can be used only for input entries of a decision table. They are a special kind of expression with additional operators. The operators get the value of the input expression implicitly as the first argument. "),(0,r.kt)("p",null,"The result of the expression must be either ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,"An unary-tests expression is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if one of the following conditions is fulfilled:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the expression evaluates to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," when the input value is applied to it"),(0,r.kt)("li",{parentName:"ul"},"the expression evaluates to a list and the input value is equal to at least one of the values in that list"),(0,r.kt)("li",{parentName:"ul"},"the expression evaluates to a value and the input value is equal to that value ")),(0,r.kt)("h3",{id:"comparison"},"Comparison"),(0,r.kt)("p",null,"Compare the input value to ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"operator"),(0,r.kt)("th",{parentName:"tr",align:null},"symbol"),(0,r.kt)("th",{parentName:"tr",align:null},"example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"(none)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"valid"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"less than"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"< 10"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"less than or equal"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<=")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<= 10"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"greater than"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},">")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"> 10"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"greater than or equal"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},">=")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},">= 10"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"less than/greater than are only supported for: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"number"),(0,r.kt)("li",{parentName:"ul"},"date"),(0,r.kt)("li",{parentName:"ul"},"time"),(0,r.kt)("li",{parentName:"ul"},"date-time"),(0,r.kt)("li",{parentName:"ul"},"year-month-duration"),(0,r.kt)("li",{parentName:"ul"},"day-time-duration ")))),(0,r.kt)("h3",{id:"interval"},"Interval"),(0,r.kt)("p",null,"Test if the input value is within the interval ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),"."),(0,r.kt)("p",null,"An interval can be open ",(0,r.kt)("inlineCode",{parentName:"p"},"(x..y)")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"]x..y[")," or closed ",(0,r.kt)("inlineCode",{parentName:"p"},"[x..y]"),". If the interval is open then the value is not included."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"(2..5)\n// input > 2 and input < 5\n\n[2..5]\n// input >= 2 and input <= 5\n\n(2..5]\n// input > 2 and input <= 5\n")),(0,r.kt)("h3",{id:"disjunction"},"Disjunction"),(0,r.kt)("p",null,"Test if at least of the expressions is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"2, 3, 4\n// input = 2 or input = 3 or input = 4\n\n< 10, > 50\n// input < 10 or input > 50\n")),(0,r.kt)("h3",{id:"negation"},"Negation"),(0,r.kt)("p",null,"Test if the expression is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'not("valid")\n// input != "valid"\n\nnot(2, 3)             \n// input != 2 and input != 3 \n')),(0,r.kt)("h3",{id:"expression"},"Expression"),(0,r.kt)("p",null,"It is also possible to use a boolean ",(0,r.kt)("a",{parentName:"p",href:"feel-expression"},"expression")," instead of an operator. For example, invoking a built-in function."),(0,r.kt)("p",null,"The input value can be accessed by the special variable ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ends with(?, "@camunda.com")\n// test if the input value (string) ends with "@camunda.com"\n\nlist contains(?, "invalid")\n// test if the input value (list) contains "invalid"\n')))}d.isMDXComponent=!0}}]);