"use strict";(self.webpackChunkfeel_scala=self.webpackChunkfeel_scala||[]).push([[4872],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(t),d=i,g=f["".concat(l,".").concat(d)]||f[d]||u[d]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={id:"feel-string-expressions",title:"String expressions",description:"This document outlines string expressions and examples."},o=void 0,s={unversionedId:"reference/language-guide/feel-string-expressions",id:"version-1.15/reference/language-guide/feel-string-expressions",title:"String expressions",description:"This document outlines string expressions and examples.",source:"@site/versioned_docs/version-1.15/reference/language-guide/feel-string-expressions.md",sourceDirName:"reference/language-guide",slug:"/reference/language-guide/feel-string-expressions",permalink:"/feel-scala/docs/1.15/reference/language-guide/feel-string-expressions",draft:!1,editUrl:"https://github.com/camunda/feel-scala/edit/master/docs/versioned_docs/version-1.15/reference/language-guide/feel-string-expressions.md",tags:[],version:"1.15",frontMatter:{id:"feel-string-expressions",title:"String expressions",description:"This document outlines string expressions and examples."},sidebar:"version-1.15/Reference",previous:{title:"Boolean expressions",permalink:"/feel-scala/docs/1.15/reference/language-guide/feel-boolean-expressions"},next:{title:"Numeric expressions",permalink:"/feel-scala/docs/1.15/reference/language-guide/feel-numeric-expressions"}},l={},c=[{value:"Literal",id:"literal",level:3},{value:"Addition/concatenation",id:"additionconcatenation",level:3}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"literal"},"Literal"),(0,i.kt)("p",null,"Creates a new string value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'"valid"\n')),(0,i.kt)("h3",{id:"additionconcatenation"},"Addition/concatenation"),(0,i.kt)("p",null,"An addition concatenates the strings. The result is a string containing the characters of both strings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'"foo" + "bar"\n// "foobar"\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The concatenation is only available for string values. For other types, you can use\nthe ",(0,i.kt)("a",{parentName:"p",href:"../builtin-functions/feel-built-in-functions-conversion#string"},"string()")," function to convert\nthe value into a string first."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'"order-" + string(123)\n'))))}u.isMDXComponent=!0}}]);