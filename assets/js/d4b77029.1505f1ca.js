"use strict";(self.webpackChunkfeel_scala=self.webpackChunkfeel_scala||[]).push([[5845],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=p(n),d=s,y=f["".concat(l,".").concat(d)]||f[d]||u[d]||a;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const a={id:"what-is-feel",title:"What is FEEL?",slug:"/reference/"},i=void 0,o={unversionedId:"reference/what-is-feel",id:"version-1.13/reference/what-is-feel",title:"What is FEEL?",description:"FEEL (Friendly Enough Expression Language) is a part of the DMN specification of the OMG. It is designed to write expressions for decision tables and literal expressions in a simple way what can easily understand by business professionals and developers.",source:"@site/versioned_docs/version-1.13/reference/what-is-feel.md",sourceDirName:"reference",slug:"/reference/",permalink:"/feel-scala/docs/1.13/reference/",draft:!1,editUrl:"https://github.com/camunda/feel-scala/edit/master/docs/versioned_docs/version-1.13/reference/what-is-feel.md",tags:[],version:"1.13",frontMatter:{id:"what-is-feel",title:"What is FEEL?",slug:"/reference/"},sidebar:"version-1.13/Reference",next:{title:"Data Types",permalink:"/feel-scala/docs/1.13/reference/language-guide/feel-data-types"}},l={},p=[{value:"Unary Tests vs. Expression",id:"unary-tests-vs-expression",level:2},{value:"Unary Tests",id:"unary-tests",level:3},{value:"Expression",id:"expression",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"FEEL (Friendly Enough Expression Language) is a part of the ",(0,s.kt)("a",{parentName:"p",href:"http://www.omg.org/spec/DMN/"},"DMN specification")," of the OMG. It is designed to write expressions for decision tables and literal expressions in a simple way what can easily understand by business professionals and developers."),(0,s.kt)("h2",{id:"unary-tests-vs-expression"},"Unary Tests vs. Expression"),(0,s.kt)("p",null,"FEEL has two entry points: unary-tests and expressions. "),(0,s.kt)("h3",{id:"unary-tests"},"Unary Tests"),(0,s.kt)("p",null,"Unary-Tests can be used only for input entries of a decision table. They are a special kind of expression with a different grammar. The expression gets the value of the input expression implicitly as the first argument. The result of the expression must be either ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,s.kt)("p",null,"Examples:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'< 7                                                 \n// input less than 7\n\nnot(2,4)                                            \n// input is not 2 or 4\n\n[date("2015-09-17")..date("2015-09-19")]            \n// input is between \'2015-09-17\' and \'2015-09-19\'\n\n<= duration("P1D")                                  \n// input is less or equal one day    \n')),(0,s.kt)("h3",{id:"expression"},"Expression"),(0,s.kt)("p",null,"Expressions can be used everywhere, e.g. in a decision table as input expression or output entry. An expression takes no implicit arguments like unary-tests."),(0,s.kt)("p",null,"Examples:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'applicant.monthly.income * 12                                           \n\nif applicant.maritalStatus in ("M","S") then "valid" else "not valid"    \n\nsum( [applicant.monthly.repayments, applicant.monthly.expenses] )        \n\nsum( credit_history[record_date > date("2011-01-01")].weight )           \n\nsome ch in credit_history satisfies ch.event = "bankruptcy"      \n')))}u.isMDXComponent=!0}}]);