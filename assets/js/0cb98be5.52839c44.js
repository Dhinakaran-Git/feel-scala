"use strict";(self.webpackChunkfeel_scala=self.webpackChunkfeel_scala||[]).push([[3697],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=c(n),d=a,h=f["".concat(l,".").concat(d)]||f[d]||u[d]||s;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={id:"what-is-feel",title:"What is FEEL?",description:"FEEL is a part of DMN specification of the Object Management Group."},i=void 0,o={unversionedId:"reference/what-is-feel",id:"version-1.16/reference/what-is-feel",title:"What is FEEL?",description:"FEEL is a part of DMN specification of the Object Management Group.",source:"@site/versioned_docs/version-1.16/reference/what-is-feel.md",sourceDirName:"reference",slug:"/reference/what-is-feel",permalink:"/feel-scala/docs/1.16/reference/what-is-feel",draft:!1,editUrl:"https://github.com/camunda/feel-scala/edit/main/docs/versioned_docs/version-1.16/reference/what-is-feel.md",tags:[],version:"1.16",frontMatter:{id:"what-is-feel",title:"What is FEEL?",description:"FEEL is a part of DMN specification of the Object Management Group."},sidebar:"Reference",previous:{title:"Get Started",permalink:"/feel-scala/docs/1.16/reference/"},next:{title:"Introduction",permalink:"/feel-scala/docs/1.16/reference/language-guide/language-guide-introduction"}},l={},c=[{value:"Unary-tests vs. expressions",id:"unary-tests-vs-expressions",level:2},{value:"Unary-tests",id:"unary-tests",level:3},{value:"Expressions",id:"expressions",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"FEEL (Friendly Enough Expression Language) is a part of\nthe ",(0,a.kt)("a",{parentName:"p",href:"http://www.omg.org/spec/DMN/"},"DMN specification")," of the Object Management Group (OMG). It is designed to write expressions for decision tables and literal expressions in a way that is easily understood by business professionals and developers."),(0,a.kt)("h2",{id:"unary-tests-vs-expressions"},"Unary-tests vs. expressions"),(0,a.kt)("p",null,"FEEL has two types of expressions for different use cases:"),(0,a.kt)("h3",{id:"unary-tests"},"Unary-tests"),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"/feel-scala/docs/1.16/reference/language-guide/feel-unary-tests"},"unary-tests expression")," is a special kind of boolean expression. It should be used for the input\nentries of a decision table (i.e. the conditions of a rule)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'< 7\n// checks if the input value is less than 7\n\nnot(2,4)\n// checks if the input value is neither 2 nor 4\n\n[date("2015-09-17")..date("2015-09-19")]\n// checks if the input value is between \'2015-09-17\' and \'2015-09-19\'\n\n<= duration("P1D")\n// checks if the input value is less than or equal to one day\n')),(0,a.kt)("h3",{id:"expressions"},"Expressions"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/feel-scala/docs/1.16/reference/language-guide/feel-expressions-introduction"},"General expressions")," that can return values of different types. They can be used everywhere; for\nexample, in a decision table as an input expression or as an output entry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'applicant.monthly.income * 12\n\nif applicant.maritalStatus in ("M","S") then "valid" else "not valid"\n\nsum( [applicant.monthly.repayments, applicant.monthly.expenses] )\n\nsum( credit_history[record_date > date("2011-01-01")].weight )\n\nsome ch in credit_history satisfies ch.event = "bankruptcy"\n')))}u.isMDXComponent=!0}}]);