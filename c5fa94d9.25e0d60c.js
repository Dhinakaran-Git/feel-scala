(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{209:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),s=(n(0),n(255)),i={id:"what-is-feel",title:"What is FEEL?",description:"FEEL is a part of DMN specification of the Object Management Group."},o={unversionedId:"reference/what-is-feel",id:"reference/what-is-feel",isDocsHomePage:!1,title:"What is FEEL?",description:"FEEL is a part of DMN specification of the Object Management Group.",source:"@site/docs/reference/what-is-feel.md",slug:"/reference/what-is-feel",permalink:"/feel-scala/docs/reference/what-is-feel",editUrl:"https://github.com/camunda/feel-scala/edit/master/docs/docs/reference/what-is-feel.md",version:"current",sidebar:"Reference",previous:{title:"Get Started",permalink:"/feel-scala/docs/reference/"},next:{title:"Introduction",permalink:"/feel-scala/docs/reference/language-guide/language-guide-introduction"}},c=[{value:"Unary-tests vs. expressions",id:"unary-tests-vs-expressions",children:[{value:"Unary-tests",id:"unary-tests",children:[]},{value:"Expressions",id:"expressions",children:[]}]}],l={toc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"FEEL (Friendly Enough Expression Language) is a part of\nthe ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"http://www.omg.org/spec/DMN/"}),"DMN specification")," of the Object Management Group (OMG). It is designed to write expressions for decision tables and literal expressions in a way that is easily understood by business professionals and developers."),Object(s.b)("h2",{id:"unary-tests-vs-expressions"},"Unary-tests vs. expressions"),Object(s.b)("p",null,"FEEL has two types of expressions for different use cases:"),Object(s.b)("h3",{id:"unary-tests"},"Unary-tests"),Object(s.b)("p",null,"A ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"/feel-scala/docs/reference/language-guide/feel-unary-tests"}),"unary-tests expression")," is a special kind of boolean expression. It should be used for the input\nentries of a decision table (i.e. the conditions of a rule)."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'< 7\n// checks if the input value is less than 7\n\nnot(2,4)\n// checks if the input value is neither 2 nor 4\n\n[date("2015-09-17")..date("2015-09-19")]\n// checks if the input value is between \'2015-09-17\' and \'2015-09-19\'\n\n<= duration("P1D")\n// checks if the input value is less than or equal to one day\n')),Object(s.b)("h3",{id:"expressions"},"Expressions"),Object(s.b)("p",null,Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"/feel-scala/docs/reference/language-guide/feel-expressions-introduction"}),"General expressions")," that can return values of different types. They can be used everywhere; for\nexample, in a decision table as an input expression or as an output entry."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'applicant.monthly.income * 12\n\nif applicant.maritalStatus in ("M","S") then "valid" else "not valid"\n\nsum( [applicant.monthly.repayments, applicant.monthly.expenses] )\n\nsum( credit_history[record_date > date("2011-01-01")].weight )\n\nsome ch in credit_history satisfies ch.event = "bankruptcy"\n')))}p.isMDXComponent=!0},255:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,b=u["".concat(i,".").concat(d)]||u[d]||f[d]||s;return n?a.a.createElement(b,o(o({ref:t},l),{},{components:n})):a.a.createElement(b,o({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);